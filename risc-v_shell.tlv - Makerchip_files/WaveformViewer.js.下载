(function() {
  define("WaveformViewer", function(require, exports, module) {
    /*
    class for managing and viewing the waveform representation of the given vcd file

    @extend Pane
    @extend ModelViewSync
    */
    var $, Logging, ModelViewSync, Pane, Promise, Utils, WaveData, WaveformGenerator, WaveformViewer;
    $ = require("jquery");
    Logging = require("Logging");
    Utils = require("Utils");
    ModelViewSync = require("ModelViewSync");
    Pane = require("Pane");
    Promise = require("bluebird");
    WaveformGenerator = require("WaveformViewer/WaveformGenerator");
    WaveData = require("VCD");
    WaveformViewer = (function() {
      var MAX_STARTING_SIGNALS, MAX_STARTING_TIME;

      class WaveformViewer extends Pane {
        /*
        constructs a new WaveformViewer
        @param {String} path becomes path property
        @param {TabbedView} the corresponding TabbedView
        @return {Promise} A promise resolving to this.
        */
        init(name, ide, project, tabbedview) {
          return this.initPane("WaveformViewer", name, ide, project, tabbedview).then(() => {
            var btn, btns, camelCase, element, i, len;
            this.enableTimestamp();
            this.le = [];
            element = this.getContainer();
            // Event handling for Makerchip debug mode. (The vcd data comes from the project source, not from compile server)
            this.project.on("vcd", (wd) => {
              this.setStatus("success");
              return this.updateWaveData(wd);
            });
            this.project.on("verilator/done", (data) => {
              if (data.success === "success") {
                return this.setStatus("success");
              }
            });
            //Moves the vertical line when any of the waves is clicked
            element.on("click", ".wave, .wavescope", (e) => {
              var parentOffset, relX;
              parentOffset = this.getContainer().offset();
              relX = e.pageX - parentOffset.left;
              return this.wg.setLineByPosition(relX);
            });
            //Highlights when name text (both `.name` and `.scope`), the value box, or the nameBackground are clicked
            element.on("click", ".name, .value, .waveName, .scope", (e) => {
              var le;
              if ($(e.target).is(".waveExpand, .waveCollapse")) {
                return;
              }
              this.le.push(le = $(e.target).parent().attr("logical_entity").replace(/\[[0-9]+\]/g, ""));
              if ($(e.target).parent().find(".scope").length) {
                return this.highlightBehHier(le, e.ctrlKey);
              } else {
                return this.highlightLogicalElement(le, e.ctrlKey);
              }
            });
            //moves vertical line when ruler is clicked on
            element.on("click", ".ruler", (e) => {
              var parentOffset, relX;
              parentOffset = this.getContainer().offset();
              relX = e.pageX - parentOffset.left;
              if (relX > this.wg.textRegionWidth) {
                return this.wg.setLineByPosition(relX);
              }
            });
            // Binds to the different buttons
            btns = ["zoom-in", "zoom-out", "zoom-full", "move-left", "move-right"];
            camelCase = function(str) {
              return str.replace(/-([a-zA-Z])/g, function(g) {
                return g[1].toUpperCase();
              });
            };
            for (i = 0, len = btns.length; i < len; i++) {
              btn = btns[i];
              ((btn) => {
                var header;
                header = Utils.$one("#mc-waveform-header", this.paneEl);
                return header.on("click", `[data-waveformviewer-button-${btn}]`, (e) => {
                  if (this.wg) {
                    return this.toHTML(this.wg[camelCase(btn)]());
                  }
                });
              })(btn);
            }
            //collapse scope
            element.on("click", ".waveCollapse", (e) => {
              this.wg.collapseScope($(e.target).parent().attr("logical_instance"));
              return this.toHTML(this.wg.generateWave(this.wg.currentStart, this.wg.currentEnd));
            });
            //expand scope
            element.on("click", ".waveExpand", (e) => {
              this.wg.expandScope($(e.target).parent().attr("logical_instance"));
              return this.toHTML(this.wg.generateWave(this.wg.currentStart, this.wg.currentEnd));
            });
            return this;
          });
        }

        /*
        @return the waveform container element.
        */
        getContainer() {
          return Utils.$one("[data-WaveformViewer-container]", this.paneEl);
        }

        /*
        @return the path of this waveform viewer.
        */
        getPath() {
          return this.path;
        }

        /*
        Resize callback.
        @param {Boolean} force if `false` only redraw if size changed
        */
        resize(force = false) {
          var width;
          width = this.getContainer().width();
          if (this.wg && (force || (width !== this.wg.windowWidth))) {
            return this.toHTML(this.wg.generateWave(this.wg.currentStart, this.wg.currentEnd, width));
          }
        }

        /*
        function called on compiler run
        @param {compiler} _compiler the compiler in use
        */
        compiler(_compiler) {
          this._compiler = _compiler;
          this._compiler.on("vcd", (wd) => {
            return this.updateWaveData(wd);
          });
          this._compiler.on("sandpiper/done", (data) => {
            if (data.success === "success") {
              return;
            }
            return this.setStatus(data.timeout ? "timeout" : "fail");
          });
          this._compiler.on("verilator/done", (data) => {
            return this.setStatus(data.success === "success" ? "success" : data.timeout ? "timeout" : "fail");
          });
          return this._compiler.on("newcompile", () => {
            return this.setStatus("working");
          });
        }

        /*
        Sets the HTML of this viewer.
        @param {String} out the string representation of the HTML to display
        */
        toHTML(out) {
          var date;
          // generate html in DOM
          this.getContainer().html(out);
          this.rendered = true;
          // Position cursors
          if ((this.wg.lineCycle != null) && !isNaN(this.wg.lineCycle)) {
            this.wg.setLineByCycle(this.wg.lineCycle);
          }
          if ((this.project.vizPane != null) && this.project.vizPane.cyc !== null) {
            this.wg.setVizCursorCycle(this.project.vizPane.cyc);
          }
          if ((this.le != null) && this.le.length > 0) {
            // Highlight elements
            this._highlightLogicalElement(this.le);
          }
          return date = new Date();
        }

        //$(".timestamp", @getDOMElement()).livestamp()
        /*
        Updates the viewer based on the wave data passed to it
        @param {WaveData} wd the waveform data
        */
        updateWaveData(wd) {
          this.wg = new WaveformGenerator(this, wd, this.getPath()); // TODO: Pass path or element?
          if (wd.numTlvSignals > MAX_STARTING_SIGNALS) {
            this.wg.collapseAllScopes();
          } else {
            this.wg.collapseScope("SV");
          }
          if (wd.lastCycle > MAX_STARTING_TIME) {
            this.wg.currentEnd = MAX_STARTING_TIME;
          }
          this.wg.lineCycle = 0;
          if (this.active) {
            return this.resize();
          }
        }

        /*
        Highlight waveform elements based on the given logical entity
        @param {String} le the given logical entity
        */
        _highlightLogicalElement(le) {
          var ele, i, len, results;
          if (!(le instanceof Array)) {
            this.le.push(le);
            le = this.le;
          }
          results = [];
          for (i = 0, len = le.length; i < len; i++) {
            ele = le[i];
            results.push($(`#${this.getPath()} [logical_entity='` + ele + "']").find(".name, .waveName, .wave rect, .value").addClass("highlight"));
          }
          return results;
        }

        /*
        Highlights waveform elements belonging to the given behavioral hierarchy logical entity
        @param {String} le the logical entity representing the pipeline
        */
        _highlightBehHier(le) {
          return $(`#${this.getPath()} [logical_entity*='` + le + "']").find(".name, .waveName, .wave rect, .value").addClass("highlight");
        }

        // console.log ("##{@getPath()} [logical_entity*='" + le + "']")
        /*
        Unhighlights all waveform elements
        */
        _unhighlightLogicalElements() {
          $(`#${this.getPath()} .highlight`).removeClass("highlight");
          return this.le = [];
        }

      };

      // @property [String] the web path where files in <module>/public/ are hosted
      WaveformViewer.prototype.public = null;

      // @property {WaveformGenerator} the waveform generator used by this viewer
      WaveformViewer.prototype.wg = null;

      // @property {Boolean} true if the HTML for the waveform has been inserted into the DOM.
      WaveformViewer.prototype.rendered = false;

      // @property {ServerCompile} a wrapper around the compilation
      WaveformViewer.prototype._compiler = null;

      // @property {TabbedView} the tabbedview this element belongs to
      WaveformViewer.prototype._tabbedview = null;

      // @property {Array<String>} represents the logical entities that should be currently highlighted
      WaveformViewer.prototype.le = null;

      // @property {Boolean} `true` if the timestamp should be hidden
      WaveformViewer.prototype.hidden = null;

      // @property {Number} MAX_STARTING_SIGNALS constant for determining when to start with all scopes collapsed
      MAX_STARTING_SIGNALS = 50;

      // @property {Number} MAX_STARTING_TIME constant for determining when to limit the original view time width
      MAX_STARTING_TIME = 100;

      return WaveformViewer;

    }).call(this);
    Utils.extend(WaveformViewer, module.config(), true, true);
    Utils.extend(WaveformViewer, ModelViewSync, {
      _highlightLogicalElement: 1,
      _unhighlightLogicalElements: 1,
      _highlightBehHier: 1
    });
    return WaveformViewer;
  });

}).call(this);
