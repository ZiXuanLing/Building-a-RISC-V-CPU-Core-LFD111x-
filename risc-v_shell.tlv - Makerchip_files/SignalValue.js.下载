(function() {

  /*
  Class representing a signal at a cycle. This class is the primary class used to interact with data from the trace.

  TODO: Cycle number is relative to the signal in the trace. This should not be exposed to the user as it is
  not timing-abstract. We should expose a cycle number that is reflective of the phase of the \viz block in which
  this is declared, or extend this class with another that does.
  TODO: Add caching of signal values. Add a class for a signal value (not associated with wave, and static),
  cached in different formats. Change transactions to point to signal values. Keep a structure of all active
  values with one object per value. For each new value in the trace, lookup this structure and allocate
  if miss. Not sure whether value should include valid.
  */
  var $, SignalValue, Utils;

  [$, Utils] = [];

  SignalValue = (function() {
    class SignalValue {
      static staticInit(TSW, TF) {
        SignalValue.TIME_SLOT_WIDTH = TSW;
        return SignalValue.TRANSITION_FIELDS = TF;
      }

      /*
      @param {Variable} signal the signal for this SignalValue
      @param {Number} cyc the starting cycle for this SignalValue
      */
      constructor(signal, cyc1) {
        this.signal = signal;
        this.cyc = cyc1;
        this.transitions = this.signal.transitions;
        this.jumpTo(this.cyc);
      }

      /*
      Does this signal exist.
      @return false for the non-existent sentinal SignalValue only.
      */
      exists() {
        return this.signal.exists();
      }

      /*
      The signal must exist, or a NonExistentSignalError is thrown.
      */
      mustExist() {
        if (!this.exists()) {
          throw new SignalValue.NonExistentSignalError("Signal is missing from trace.");
        }
      }

      // TODO: Eliminate legacy functions.
      getValue() {
        //(called by waveform viewer) console.log("getValue is a legacy function that should not be called.")
        return this.transitions[this.transIndex + 1];
      }

      getValueStr() {
        console.log("getValue is a legacy function that should not be called.");
        return this.transitions[this.transIndex + 1];
      }

      
        // For implementing as*(def) functions.
      // @param def default value or undefined
      // @param map function that maps the value string to the desired return type.
      _asSomething(def, map) {
        if (!this.inTrace()) {
          return def;
        }
        if (!this.exists()) {
          if (def === void 0) {
            throw new SignalValue.NonExistentSignalError("Cannot return the value of a signal that is missing from trace.");
          } else {
            return def;
          }
        }
        // Value exists. Map it.
        return map(this.transitions[this.transIndex + 1]);
      }

      getLegacyValue() {
        var ret;
        ret = this.getValue();
        if (!this.isValid()) {
          ret = "W" + ret;
        }
        return ret;
      }

      getPrevTransitionLegacyValue() {
        var ret;
        ret = this.getPrevTransitionValueStr();
        if (typeof ret === "undefined") {
          return void 0;
        }
        if (!this.isPrevTransitionValid()) {
          ret = "W" + ret;
        }
        return ret;
      }

      getNextTransitionLegacyValue() {
        var ret;
        ret = this.getNextTransitionValueStr();
        if (typeof ret === "undefined") {
          return void 0;
        }
        if (!this.isNextTransitionValid()) {
          ret = "W" + ret;
        }
        return ret;
      }

      getCycle() {
        return this.cyc;
      }

      /*
      @return {Boolean} true if current cycle is off the end of the trace.
      */
      offEnd() {
        return typeof this.cyc === "undefined" || this.cyc > this.signal.waveData.endCycle;
      }

      // TODO: Begining -> Beginning
      /*
      @return {Boolean} true if current cycle is off the beginning of the trace.
      */
      offBegining() {
        return typeof this.cyc === "undefined" || this.cyc < this.signal.waveData.startCycle;
      }

      /*
      @return {Boolean} true if current cycle is within (inclusive) the bounds of this trace.
      */
      inTrace() {
        return typeof this.cyc !== "undefined" && this.cyc <= this.signal.waveData.endCycle && this.cyc >= this.signal.waveData.startCycle;
      }

      /*
      Gets the cycle of the transition to the current value.
      @return {Number} the next (phase-granular) cycle
      */
      getTransitionCycle() {
        return this.transitions[this.transIndex];
      }

      /*
      Gets the next value string (as in VCD) of this signal
      @return {String, undefined} the next value
      */
      getNextTransitionValueStr() {
        return this.transitions[this.transIndex + SignalValue.TRANSITION_FIELDS + 1];
      }

      /*
      Gets the cycle of the next transition of this signal
      @return {Number} the next (phase-granular) cycle
      */
      getNextTransitionCycle() {
        return this.transitions[this.transIndex + SignalValue.TRANSITION_FIELDS];
      }

      /*
      Gets the previous value string (as in VCD) of this signal
      @return {String, undefined} the previous value (last transition)
      */
      getPrevTransitionValueStr() {
        return this.transitions[this.transIndex - SignalValue.TRANSITION_FIELDS + 1];
      }

      /*
      Gets the previous validity of this signal
      @return {Boolean, undefined} the validity of the value prior to the transition to the current value.
      */
      isPrevTransitionValid() {
        return this.transitions[this.transIndex - SignalValue.TRANSITION_FIELDS + 2];
      }

      /*
      Gets the validity of this signal after the next transition.
      @return {Boolean, undefined} the validity of the value after the next transition.
      */
      isNextTransitionValid() {
        return this.transitions[this.transIndex + SignalValue.TRANSITION_FIELDS + 2];
      }

      /*
      Is this signal valid (according to when conditions).
      */
      isValid() {
        return this.transitions[this.transIndex + 2];
      }

      /*
      [Private method with public legacy.]
      Step to the given cycle (forward or backward).
      Same result as jumpToCycle(cycle), but it walks transitions, rather than jumping
      through anchor points, so it is best for small deltas.
      @param {int} cyc
      @return @ (for chaining)
      */
      stepTo(cyc) {
        var c, forward;
        forward = cyc > this.cyc;
        if (forward) {
          while ((typeof (c = this.getNextTransitionCycle()) !== "undefined") && c <= cyc) {
            this.transIndex += SignalValue.TRANSITION_FIELDS;
          }
        } else {
          while (this.transIndex >= 0 && this.getTransitionCycle() > cyc) {
            this.transIndex -= SignalValue.TRANSITION_FIELDS;
          }
        }
        this.cyc = cyc;
        return this;
      }

      /*
      [Not timing-abstract.]
      Go to the given cycle as efficiently as possible.
      @param {int} cyc the cycle to go to.
      @return @ (for chaining)
      */
      goTo(cyc) {
        if (typeof this.transitions[this.transIndex] === "undefined" || Math.abs(cyc - this.cyc) > this.TIME_SLOT_WIDTH) {
          this.jumpTo(cyc);
        } else {
          this.stepTo(cyc);
        }
        return this;
      }

      /*
      [Not timing-abstract.]
      Go to the beginning of the trace.
      @return @ (for chaining)
      */
      goToSimStart() {
        this.goTo(this.signal.waveData.startCycle);
        return this;
      }

      /*
      [Not timing-abstract.]
      Go to the beginning of the trace.
      @return @ (for chaining)
      */
      goToSimEnd() {
        this.goTo(this.signal.waveData.endCycle);
        return this;
      }

      /*
      Increment the current cycle by the given amount (positive or negative)
      (as efficiently as possible).
      @param {int} cyc
      @return @ (for chaining)
      */
      step(cyc = 1) {
        return this.goTo(this.cyc + cyc);
      }

      /*
      [Private method with public legacy.]
      Step forward (positive) or backward (negative) the given number of transitions (value changes).
      A step of 0 steps <= 0 cycles to the transition resulting in the current value.
      @param {int} steps the number of transitions to step
      @return {SignalValue} this {SignalValue} (for chaining)
      */
      stepTransition(steps = 1) {
        this.transIndex += SignalValue.TRANSITION_FIELDS * steps;
        this.cyc = this.getTransitionCycle();
        return this;
      }

      /*
      Step forward at least one cycle until the signal's value asInt is the given value
      or the end of the trace is reached (stopping offEnd).
      @param {int} val the signal value to step to
      @return {boolean} true on success
      */
      forwardToValue(val) {
        this.step();
        while (!this.offEnd()) {
          if (this.asInt() === val) {
            return true;
          }
          this.stepTransition();
        }
        return false;
      }

      /*
      Step backward at least one cycle until the signal's value asInt is the given value
      or the beginning of the trace is reached (stopping offBeginning).
      @param {int} val the signal value to step to
      @return {boolean} true on success
      */
      backToValue(val) {
        this.step(-1);
        while (!this.offBegining()) {
          if (this.asInt() === val) {
            return true;
          }
          this.stepTransition(0);
          this.step(-1);
        }
        return false;
      }

      // Legacy methods:
      goToNextValue() {
        return this.goToNextTransition();
      }

      goToPrevValue() {
        return this.goToPrevTransition();
      }

      nextCycle() {
        return this.goToNextCycle();
      }

      prevCycle() {
        return this.goToNextCycle();
      }

      asFixed(places, def) {
        return this.asRealFixed(places, def);
      }

      stepByCyc(cyc) {
        return this.step(cyc);
      }

      goToNextTransition() {
        return this.stepTransition(1);
      }

      goToPrevTransition() {
        return this.stepTransition(-1);
      }

      // Methods to access the signal value in various representations.
      /*
      Get the signal value as a binary string with leading zeros.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {String} the signal value as a string of binary bits, of def.
      */
      asBinaryStr(def) {
        return this._asSomething(def, function(valStr) {
          return valStr;
        });
      }

      /*
      Get the signal value as a string of hexadecimal digits, w/ X for digits with all non-0/1 bits and x for
      digits with any non 0/1 bits.
      @param {String} leadingZeroStr the string to include for each leading zero, such as ("0", " ", or "").
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {String} the hexadecimal string
      */
      asHexStr(leadingZeroStr = "0", def = void 0) {
        return this._asSomething(def, function(valStr) {
          var b, bit, digitVal, i, ret, v, xCnt;
          ret = "";
          bit = 0;
          while (bit < valStr.length) {
            digitVal = 0;
            xCnt = 0;
            for (b = i = 0; i <= 3; b = ++i) {
              v = valStr[valStr.length - 1 - bit];
              if (v === "1") {
                digitVal += 1 << b;
              } else if ((v !== "0") && (v !== void 0)) {
                xCnt++;
              }
              bit++;
            }
            ret = (xCnt === 0 ? digitVal.toString(16) : (xCnt < 4 ? "x" : "X")) + ret;
            if (leadingZeroStr !== "0") {
              while (ret[ret.length - 1] === "0" && ret.length > 1) {
                ret = ret.substring(1);
              }
            }
          }
          return ret;
        });
      }

      /*
      Get the signal value as a decimal string.
      @param {String} leadingZeroStr the string to include for each leading zero, such as ("0", " ", or ""),
                      for any digits required to represent the maximum possible value.
      @param {Boolean} signed (optional) true to treat the leading bit as a sign bit. Default: false.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {String} the decimal string representing the signal value
      */
      asIntStr(leadingZeroStr, signed, def) {
        return this._asSomething(def, function(valStr) {
          return Utils.unwrittenCode();
        });
      }

      /*
      Get the signal value interpreted as a SystemVerilog string type.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {String} the value of the signal interpreted as a SystemVerilog string.
      */
      asString(def) {
        return this._asSomething(def, (binaryStr) => {
          var ch, charBinaryStr, len, ret;
          if ((this.signal.width % 8) !== 0) {
            return def;
          }
          len = this.signal.width / 8;
          ret = "";
          ch = 0;
          while (ch < len) {
            charBinaryStr = binaryStr.substring(ch * 8, (ch + 1) * 8);
            ret += String.fromCharCode(parseInt(charBinaryStr, 2));
            ch++;
          }
          return ret;
        });
      }

      /*
      Get the signal value as a boolean, or null if dont-care or not a single bit.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {Boolean} the signal value as a boolean or null
      */
      asBool(def) {
        return this._asSomething(def, function(valStr) {
          if (valStr === "0") {
            return false;
          } else if (valStr === "1") {
            return true;
          }
        });
      }

      /*
      Get the signal value as an integer, or NaN if value contains dont-cares.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {int} the value of the signal
      */
      asInt(def) {
        return this._asSomething(def, function(valStr) {
          return parseInt(valStr, 2);
        });
      }

      /*
      Get the 64-bit signal interpreted as an SV "real" signal.
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {Number} the value of the signal interpreted as an IEEE 64-bit floating-point value
      */
      asReal(def) {
        return this._asSomething(def, function(valStr) {
          var denorm, exp, expStr, frac, fracStr, ret, signStr, str;
          // TODO: Assumes valid 64-bit binary number.
          str = val;
          expStr = str.substring(1, 12);
          if (expStr === "11111111111") { // TODO: All exceptional values treated as NaN.
            return 0/0;
          }
          denorm = expStr === "00000000000";
          signStr = str.substring(0, 1);
          exp = parseInt(expStr, 2) - 1023;
          fracStr = str.substring(12);
          frac = parseInt((denorm ? fracStr + "0" : "1" + fracStr), 2);
          ret = frac * Math.pow(2, exp - 52);
          if (signStr === "1") {
            ret = -ret;
          }
          return ret;
        });
      }

      /*
      Get the 64-bit signal interpreted as an SV "real", rounded to a fixed
      decimal place.
      @param {int} places the number of decimal places
      @param {Any} def the value to return if outside the bounds of the trace; undefined by default
      @return {Number} the value of the signal interpreted as an IEEE 64-bit floating-point value, rounded to
                       a fixed number of digits
      */
      asRealFixed(places, def) {
        return this.asReal(def).toFixed(places);
      }

      /*
      Jumps this SignalValue to the given cycle (via anchors array).
      @param {int} cyc the cycle to jump the SignalValue to
      @return @ for chaining
      */
      jumpTo(cyc) {
        this.transIndex = this.signal.getTransIndexOfCycle(cyc);
        this.cyc = cyc;
        return this;
      }

    };

    // @property {Variable} the signal for this SignalValue
    SignalValue.prototype.signal = null;

    // @property {Array} a shortcut to signal.transitions.
    SignalValue.prototype.transitions = null;

    // @property {Number} phase-granular cycle this SignalValue is currently at
    SignalValue.prototype.cyc = -1;

    // @property {int} transIndex the index into the transitions array of the cycle field
    //                 defining the transition that assigns the current value.
    SignalValue.prototype.transIndex = null;

    // @property {int} the index of the current value within its chunk.
    //_indexInChunk: -1
    // @property {Number} TIME_SLOT_WIDTH constant for the granularity of the anchor array in cycles
    //                    (should be same as WaveData)
    SignalValue.TIME_SLOT_WIDTH = null;

    SignalValue.TRANSITION_FIELDS = null;

    return SignalValue;

  }).call(this);

  /*
  An Error thrown when a value is accessed from a non-existent signal.
  */
  SignalValue.NonExistentSignalError = class NonExistentSignalError extends Error {
    constructor(message) {
      super(message);
      this.name = "NonExistentSignalError";
    }

  };

  define(function(require, exports, module) {
    $ = require("jquery");
    Utils = require("Utils");
    $.extend(SignalValue.prototype, module.config());
    return SignalValue;
  });

}).call(this);
