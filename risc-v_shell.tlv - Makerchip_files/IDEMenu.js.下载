(function() {
  var $, BladeComponent, IDEMenu, Promise, Utils;

  [BladeComponent, $, Promise, Utils] = [];

  /*
  A module for {IDE} that displays a full-width menu on top of an {FlexSplit}

  @extend BladeComponent
  @extend ModuleConfigObject
  */
  IDEMenu = class IDEMenu {
    init(path, opts) {
      this.path = path;
      //@feedback = opts.feedback
      return this.compileComponent("menu", opts, this.blade).then((html) => {
        $(`#${this.path}`).html(html);
        return this;
      });
    }

    /*
    Sets project and updates UI.
    @param {Project} @_project The value to set as project
    @return IDEMenu
    */
    project(_project) {
      this._project = _project;
      if (!this._project.user || !this._project.path) {
        this.save_status("no project");
      } else {
        this._project.canEdit().then((canEdit) => {
          if (canEdit) {
            return this.save_status("saved");
          } else {
            return this.save_status("no auth");
          }
        });
      }
      this._project.on("saving", () => {
        return this.save_status("saving");
      });
      this._project.on("saved", (date) => {
        this.save_time(date);
        return this.save_status("saved");
      });
      this._project.on("save error", () => {
        return this.save_status("error");
      });
      this._project.on("app error", () => {
        return this.save_status("apperror");
      });
      return this;
    }

    /*
    Sets the time of the last save.
    @param {Date} save_time The time of the last save
    @return IDEMenu
    */
    save_time(save_time) {
      var el, savedEl;
      savedEl = Utils.$one("[mc-menu-status-case=\"saved\"]");
      el = Utils.$one(".timestamp", savedEl);
      el.attr("data-livestamp", save_time / 1000);
      // The timestamp message updates on polling, so it will not update immediately. This results in a glitch
      // when changing from "saving" to "saved" state, where the message goes from "saving..." to
      // "saved old-time-ago", then "saved a few seconds ago". This method is only called for recent saves,
      // so we manually update the message here to reflect a recent save.
      el.text("a few seconds ago");
      return this;
    }

    /*
    Set project status and update the UI to reflect it.
    @param {"no project", "saved", "no auth", "saving", "error"} status The status.
    */
    save_status(status) {
      // Assign status attribute. Stylus unhides corresponding Blade based on this.
      return Utils.$one("[mc-menu-status]").attr("mc-menu-status", status);
    }

  };

  define("IDEMenu", function(require, exports, module) {
    BladeComponent = require("BladeComponent");
    $ = require("jquery");
    Promise = require("bluebird");
    Utils = require("Utils");
    $.extend(IDEMenu.prototype, BladeComponent, module.config());
    return IDEMenu;
  });

}).call(this);
